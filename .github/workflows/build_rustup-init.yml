name: Build rustup-init

on:
  - workflow_dispatch

jobs:
  wheel:
    name: build-${{ matrix.os }}-${{ matrix.target }}
    runs-on: ${{ matrix.os }}
    defaults:
      run:
        shell: nu {0}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            flags: "--features=vendored-openssl --zig"
            rustflags: -C split-debuginfo=packed
          - os: ubuntu-latest
            target: x86_64-unknown-linux-musl
            flags: "--features=vendored-openssl --zig"
            rustflags: -C split-debuginfo=packed
          - os: ubuntu-24.04-arm
            target: aarch64-unknown-linux-gnu
            flags: "--features=vendored-openssl --zig"
            rustflags: -C split-debuginfo=packed
          - os: ubuntu-24.04-arm
            target: aarch64-unknown-linux-musl
            flags: "--features=vendored-openssl --zig"
            rustflags: -C split-debuginfo=packed
          - os: macos-13
            target: x86_64-apple-darwin
            flags: ""
            rustflags: -C split-debuginfo=packed
          - os: macos-latest
            target: aarch64-apple-darwin
            flags: ""
            rustflags: -C split-debuginfo=packed
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            flags: ""
            rustflags: -C target-feature=+crt-static -C split-debuginfo=packed
          - os: windows-11-arm
            target: aarch64-pc-windows-msvc
            flags: ""
            rustflags: -C target-feature=+crt-static -C split-debuginfo=packed

    steps:
      - uses: hustcer/setup-nu@v3
      - uses: actions/checkout@v4
      - run: git submodule update --init -- rustup-init/rustup
      - uses: actions/setup-python@v5
        with:
          python-version: "3.x"
      - uses: astral-sh/setup-uv@v6
      - uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Set RUSTFLAGS env variable
        if: matrix.rustflags
        shell: bash
        run: echo "RUSTFLAGS=${{ matrix.rustflags }}" >> $GITHUB_ENV

      - uses: PyO3/maturin-action@v1
        with:
          command: build
          args: --out dist ${{ matrix.flags }}
          target: ${{ matrix.target }}
          manylinux: auto
          working-directory: ./rustup-init

      - run: ls rustup-init/dist

      - name: Install test
        if: true && !contains( matrix.target , 'musl' )
        run: |-
          pip install --no-index -f rustup-init/dist/ rustup-init-bin
          which rustup-init
          rustup-init --version
          rustup-init --help

      - uses: actions/upload-artifact@v4
        with:
          name: wheel-${{ matrix.os }}-${{ matrix.target }}-${{ github.run_attempt }}
          path: rustup-init/dist/*.whl
          if-no-files-found: error

  sdist:
    name: sdist
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
      - run: git submodule update --init -- rustup-init/rustup
      - uses: astral-sh/setup-uv@v6

      - run: uv build --sdist
        working-directory: ./rustup-init

      - run: ls rustup-init/dist

      - uses: actions/upload-artifact@v4
        with:
          name: sdist
          path: rustup-init/dist/*.tar.gz
          if-no-files-found: error

  publish:
    name: publish
    runs-on: ubuntu-latest
    needs: [sdist, wheel]
    environment: publish
    permissions:
      id-token: write
      attestations: write

    steps:
      - uses: actions/download-artifact@v4
        with:
          merge-multiple: true
          path: dist

      - uses: actions/attest-build-provenance@v2
        with:
          subject-path: dist/*

      - run: ls dist

      - name: Publish package distributions to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          packages-dir: dist
          skip-existing: true
