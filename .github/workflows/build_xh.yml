name: Build xh

on:
  - workflow_dispatch

jobs:
  wheel:
    name: build-${{ matrix.os }}-${{ matrix.target }}
    runs-on: ${{ matrix.os }}
    defaults:
      run:
        shell: nu {0}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-musl
            flags: --features="native-tls reqwest/native-tls-vendored" --zig
            tag: manylinux_2_28_x86_64.musllinux_1_2_x86_64
            rustflags: -C split-debuginfo=packed -C lto -C embed-bitcode=yes -C codegen-units=1
            test: true
          - os: ubuntu-24.04-arm
            target: aarch64-unknown-linux-musl
            flags: --features="native-tls reqwest/native-tls-vendored" --zig
            tag: manylinux_2_28_aarch64.musllinux_1_2_aarch64
            rustflags: -C split-debuginfo=packed -C lto -C embed-bitcode=yes -C codegen-units=1
            test: true
          - os: ubuntu-latest
            target: riscv64gc-unknown-linux-musl
            flags: --features="native-tls reqwest/native-tls-vendored" --zig
            tag: manylinux_2_31_riscv64.musllinux_1_2_riscv64
            rustflags: -C lto -C embed-bitcode=yes -C codegen-units=1
            test: false
          - os: macos-latest
            target: x86_64-apple-darwin
            flags: --features=native-tls
            rustflags: -C split-debuginfo=packed -C lto -C embed-bitcode=yes -C codegen-units=1
            test: false
          - os: macos-latest
            target: aarch64-apple-darwin
            flags: --features=native-tls
            rustflags: -C split-debuginfo=packed -C lto -C embed-bitcode=yes -C codegen-units=1
            test: true
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            flags: --features=native-tls
            rustflags: -C target-feature=+crt-static -C split-debuginfo=packed -C lto -C embed-bitcode=yes -C codegen-units=1
            test: true
          - os: windows-11-arm
            target: aarch64-pc-windows-msvc
            flags: --features=native-tls
            rustflags: -C target-feature=+crt-static -C split-debuginfo=packed -C lto -C embed-bitcode=yes -C codegen-units=1
            test: true

    steps:
      - uses: hustcer/setup-nu@v3
      - uses: actions/checkout@v5
      - run: git submodule update --init -- xh/xh
      - uses: actions/setup-python@v5
        with:
          python-version: "3.x"
      - uses: astral-sh/setup-uv@v6
      - uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Set RUSTFLAGS env variable
        if: matrix.rustflags
        shell: bash
        run: echo "RUSTFLAGS=${{ matrix.rustflags }}" >> $GITHUB_ENV

      - uses: PyO3/maturin-action@v1
        with:
          command: build
          args: --release --out dist ${{ matrix.flags }}
          target: ${{ matrix.target }}
          manylinux: musllinux_1_2
          working-directory: ./xh

      - name: Post Processing wheel
        if: matrix.tag
        shell: bash
        run: |
          sudo chmod -R 777 dist
          uvx wheel tags --remove --platform-tag ${{ matrix.tag }} dist/*.whl
        working-directory: ./xh

      - run: ls xh/dist

      - name: Install test
        if: matrix.test
        run: |-
          pip install --no-index -f xh/dist/ xh-bin
          which xh
          xh --version

          do -i { objdump -T (which xh | get path.0) }

          xh -I POST https://httpbingo.org/post foo=bar
          xh -I --native-tls POST https://httpbingo.org/post native=tls

      - uses: actions/upload-artifact@v4
        with:
          name: wheel-${{ matrix.os }}-${{ matrix.target }}-${{ github.run_attempt }}
          path: xh/dist/*.whl
          if-no-files-found: error

  sdist:
    name: sdist
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v5
      - run: git submodule update --init -- xh/xh
      - uses: astral-sh/setup-uv@v6

      - run: uv build --sdist
        working-directory: ./xh

      - run: ls xh/dist

      - uses: actions/upload-artifact@v4
        with:
          name: sdist
          path: xh/dist/*.tar.gz
          if-no-files-found: error

  publish:
    name: publish
    runs-on: ubuntu-latest
    needs: [sdist, wheel]
    environment: publish
    permissions:
      id-token: write
      attestations: write

    steps:
      - uses: actions/download-artifact@v5
        with:
          merge-multiple: true
          path: dist

      - uses: actions/attest-build-provenance@v2
        with:
          subject-path: dist/*

      - run: ls dist

      - name: Publish package distributions to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          packages-dir: dist
          skip-existing: true
